{"code":"import JSBI from 'jsbi';\r\n/*export enum ChainId {\r\n  MAINNET = 1,\r\n  TESTNET = 2\r\n}*/\r\nexport var TradeType;\r\n(function (TradeType) {\r\n    TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\r\n    TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\r\n})(TradeType || (TradeType = {}));\r\nexport var Rounding;\r\n(function (Rounding) {\r\n    Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\r\n    Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\r\n    Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\r\n})(Rounding || (Rounding = {}));\r\n// Testnet address: local: 0x0bFBe6255ef2f329e6E6400a01172413E69682c6 - deployed 2020-10-30 16:10 UTC\r\n// Mainnet address: 0x7e4187406BF18eB6Bf479f33fb99bC7c22c0A0Fc - final Mainnet deployment\r\nexport const FACTORY_ADDRESS = '0x7e4187406BF18eB6Bf479f33fb99bC7c22c0A0Fc';\r\n// Original Uniswap code hash: 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\r\n// INIT_CODE_HASH derived from @swoop-exchange/core/build/contracts/UniswapV2Pair.json bytecode -> keccak256(['bytes'], [`0x${bytecode}`])\r\n// Updated 2020-10-23 11:09 UTC due to changing swoop-core -> UniswapV2ERC20.sol to use Swoop / SWP token name & Symbol\r\nexport const INIT_CODE_HASH = '0xe9574de88b7d368ba596b539348788fc220a090ef49838cd2004164f36680c18';\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000);\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0);\r\nexport const ONE = JSBI.BigInt(1);\r\nexport const TWO = JSBI.BigInt(2);\r\nexport const THREE = JSBI.BigInt(3);\r\nexport const FIVE = JSBI.BigInt(5);\r\nexport const TEN = JSBI.BigInt(10);\r\nexport const _100 = JSBI.BigInt(100);\r\nexport const _997 = JSBI.BigInt(997);\r\nexport const _1000 = JSBI.BigInt(1000);\r\nexport var SolidityType;\r\n(function (SolidityType) {\r\n    SolidityType[\"uint8\"] = \"uint8\";\r\n    SolidityType[\"uint256\"] = \"uint256\";\r\n})(SolidityType || (SolidityType = {}));\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n    [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n    [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n};\r\n//# sourceMappingURL=constants.js.map","references":["/home/nightfuury/workspace/Swoop/swoop-sdk/node_modules/jsbi/jsbi.d.ts"],"map":"{\"version\":3,\"file\":\"constants.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/constants.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,IAAI,MAAM,MAAM,CAAA;AAKvB;;;GAGG;AAEH,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,uDAAW,CAAA;IACX,yDAAY,CAAA;AACd,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAED,MAAM,CAAN,IAAY,QAIX;AAJD,WAAY,QAAQ;IAClB,mDAAU,CAAA;IACV,yDAAa,CAAA;IACb,+CAAQ,CAAA;AACV,CAAC,EAJW,QAAQ,KAAR,QAAQ,QAInB;AAED,qGAAqG;AACrG,yFAAyF;AACzF,MAAM,CAAC,MAAM,eAAe,GAAG,4CAA4C,CAAA;AAE3E,iGAAiG;AACjG,0IAA0I;AAC1I,uHAAuH;AACvH,MAAM,CAAC,MAAM,cAAc,GAAG,oEAAoE,CAAA;AAElG,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAElD,mCAAmC;AACnC,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAClC,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AACjC,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AACjC,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AACnC,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAClC,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;AAClC,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AACpC,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AACpC,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAEtC,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,+BAAe,CAAA;IACf,mCAAmB,CAAA;AACrB,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB;AAED,MAAM,CAAC,MAAM,oBAAoB,GAAG;IAClC,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IACzC,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,oEAAoE,CAAC;CAC1G,CAAA\"}","dts":{"name":"/home/nightfuury/workspace/Swoop/swoop-sdk/src/constants.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nexport declare type BigintIsh = JSBI | bigint | string;\r\nexport declare enum TradeType {\r\n    EXACT_INPUT = 0,\r\n    EXACT_OUTPUT = 1\r\n}\r\nexport declare enum Rounding {\r\n    ROUND_DOWN = 0,\r\n    ROUND_HALF_UP = 1,\r\n    ROUND_UP = 2\r\n}\r\nexport declare const FACTORY_ADDRESS = \"0x7e4187406BF18eB6Bf479f33fb99bC7c22c0A0Fc\";\r\nexport declare const INIT_CODE_HASH = \"0xe9574de88b7d368ba596b539348788fc220a090ef49838cd2004164f36680c18\";\r\nexport declare const MINIMUM_LIQUIDITY: JSBI;\r\nexport declare const ZERO: JSBI;\r\nexport declare const ONE: JSBI;\r\nexport declare const TWO: JSBI;\r\nexport declare const THREE: JSBI;\r\nexport declare const FIVE: JSBI;\r\nexport declare const TEN: JSBI;\r\nexport declare const _100: JSBI;\r\nexport declare const _997: JSBI;\r\nexport declare const _1000: JSBI;\r\nexport declare enum SolidityType {\r\n    uint8 = \"uint8\",\r\n    uint256 = \"uint256\"\r\n}\r\nexport declare const SOLIDITY_TYPE_MAXIMA: {\r\n    uint8: JSBI;\r\n    uint256: JSBI;\r\n};\r\n"}}
